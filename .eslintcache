[{"C:\\Users\\Bruno\\Documents\\Programming\\sudoku-react\\src\\App.js":"1","C:\\Users\\Bruno\\Documents\\Programming\\sudoku-react\\src\\reportWebVitals.js":"2","C:\\Users\\Bruno\\Documents\\Programming\\sudoku-react\\src\\index.js":"3"},{"size":10397,"mtime":1611513991409,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1608569602508,"results":"6","hashOfConfig":"5"},{"size":512,"mtime":1610826584569,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"2tp7y",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Bruno\\Documents\\Programming\\sudoku-react\\src\\App.js",["15"],"// import logo from './logo.svg';\nimport _ from 'lodash';\nimport './App.css';\nimport React, { useEffect, useState } from 'react';\n\n/* UTILS */\n\n/**\n * Shuffles array in place.\n * @param {Array} a items An array containing the items.\n */\nfunction shuffle(a) {\n  var j, x, i;\n  for (i = a.length - 1; i > 0; i--) {\n    j = Math.floor(Math.random() * (i + 1));\n    x = a[i];\n    a[i] = a[j];\n    a[j] = x;\n  }\n  return a;\n}\n\n\nfunction hardcodedStart() {\n  return [\n    [5,3,0,0,7,0,0,0,0],\n    [6,0,0,1,9,5,0,0,0],\n    [0,9,8,0,0,0,0,6,0],\n    [8,0,0,0,6,0,0,0,3],\n    [4,0,0,8,0,3,0,0,1],\n    [7,0,0,0,2,0,0,0,6],\n    [0,6,0,0,0,0,2,8,0],\n    [0,0,0,4,1,9,0,0,5],\n    [0,0,0,0,8,0,0,7,9]\n  ];\n}\n\nfunction randomStart() {\n  const gameMatrix = new Array(9).fill(null).map((el, i) => new Array(9).fill(0));\n  const numbers = new Array(9).fill(null).map((el, i) => i+1);\n\n  for(let skip = 0; skip < 3; skip++) {\n    const tmp = shuffle([...numbers]);\n    // console.log(tmp);\n    for(let c = 0; c < 3; c++) {\n      for(let r = 0; r < 3; r++) {\n        gameMatrix[c+skip*3][r+skip*3] = tmp[c*3+r];\n      }\n    }\n  }\n\n  return gameMatrix;\n}\n\nfunction OKCol(matrix, col, nb) {\n  for(let r = 0; r < 9; r++) if(matrix[col][r] === nb) return false;\n  return true;\n};\n\nfunction OKRow(matrix, row, nb) {\n  for(let c = 0; c < 9; c++) if(matrix[c][row] === nb) return false;\n  return true;\n};\n\nfunction OKMatrix(matrix, col, row, nb) {\n  const startCol = Math.floor(col / 3) * 3, startRow = Math.floor(row / 3) * 3;\n  for (let c = 0; c < 3; c++)\n    for (let r = 0; r < 3; r++)\n      if(nb === matrix[c + startCol][r + startRow]) return false;\n  return true;\n}\n\nfunction checkNumberCell(matrix, col, row, nb) {\n  return OKRow(matrix, row, nb) && OKCol(matrix, col, nb) && OKMatrix(matrix, col, row, nb);\n}\n\nfunction solveMatrix(matrix) {\n  let rem = 0;\n  for(let column = 0; column < 9; column++)\n    for(let row = 0; row < 9; row++) {\n      if (matrix[column][row]) continue;\n\n      rem = 1;\n      for (let nb = 1; nb <= 9; nb++) {\n        if(OKRow(matrix, row, nb) && OKCol(matrix, column, nb) && OKMatrix(matrix, column, row, nb)) {\n          matrix[column][row] = nb;\n          if(solveMatrix(matrix)) return true;\n          matrix[column][row] = 0;\n        }\n      }\n      return false;\n    }\n  if(rem === 0) return true;\n  return false;\n};\n\nfunction isMatrixValid(matrix, copy = true) {\n  let res;\n  if(copy) {\n    const copied = _.cloneDeep(matrix);\n    res = solveMatrix(copied);\n    console.log(copied);\n  }\n  else res = solveMatrix(matrix);\n  return res;\n}\n\nfunction compareCoordinates(coord1, coord2) {\n  return coord1 !== null && coord2 !== null && coord1.c === coord2.c && coord1.r === coord2.r;\n}\n\n\n//TODO change to enums using Typescript\nconst CellType = {\n  FIXED: 'fixed',\n  EDITABLE: 'editable',\n  VALID: 'valid',\n  INVALID: 'invalid'\n}\n\nconst Difficulty = {\n  EASY: 5,\n  MEDIUM: 6,\n  HARD: 7\n}\n\n/* END OF UTILS */\n\n\nclass Box extends React.Component {\n  class() {\n    let classname = 'box ' + this.props.type;\n    if(this.props.selected) classname += \" selected\";\n    return classname;\n  }\n\n  render() {\n    return (\n      <div className={this.class()}\n            onClick={() => { if(this.props.type !== CellType.FIXED) this.props.selectCell(this.props.coordinates) }}>\n          {this.props.number ? this.props.number : \"\"}\n      </div>\n    );\n  }\n}\n\n\nclass Matrix3 extends React.Component {\n  getNumberFromMatrice() {\n    const tpCol = Math.floor(this.props.matrixNb % 3) * 3, // top left column index of the matrix\n        tpRow = Math.floor(this.props.matrixNb / 3) * 3;\n    const numbers = new Array(9).fill(0);\n    const types = new Array(9).fill('');\n    const coordinates = new Array(9).fill(null);\n    for(let row = 0; row < 3; row++)\n      for(let col = 0; col < 3; col++) {\n        numbers[row*3 + col] = this.props.matrix[col+tpCol][row+tpRow];\n        types[row*3 + col] = this.props.cellTypes[col+tpCol][row+tpRow];\n        coordinates[row*3 + col] = { c: col+tpCol, r: row+tpRow };\n      }\n\n    return { numbers, types, coordinates };\n  }\n\n  makeBoxes() {\n    const { numbers, types, coordinates } = this.getNumberFromMatrice();\n    \n    return new Array(9).fill(null).map((el, i) => {\n      let box = <Box key={\"box\"+this.props.matrixNb+\"-\"+(i+1)}\n                    type={types[i]}\n                    number={numbers[i]}\n                    coordinates={coordinates[i]}\n                    selected={compareCoordinates(this.props.cellSelected, coordinates[i])}\n                    setNumber={this.props.setNumber}\n                    selectCell={this.props.selectCell}/>\n      return box;\n    });\n  }\n\n  render() {\n    return (\n        <div className=\"matrix\">\n          {this.makeBoxes()}\n        </div>\n    )\n  }\n}\n\n\n\nclass Sudoku extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sudokuMatrix: new Array(9).fill(null).map(() => new Array(9).fill(0)),\n      cellTypes: new Array(9).fill(null).map(() => new Array(9).fill('')),\n      cellSelected: null\n    }\n\n    this.setNumber = this.setNumber.bind(this);\n    this.selectCell = this.selectCell.bind(this);\n    this.keyDown = this.keyDown.bind(this);\n    this.startGame = this.startGame.bind(this);\n\n    // console.log(this.state.game.fixed);\n    // this.solveMatrix();\n  }\n\n  startGame(difficulty = Difficulty.EASY) {\n    const sudokuMatrix = randomStart();\n    const cellTypes = new Array(9).fill(null).map(() => new Array(9).fill(0));\n\n    solveMatrix(sudokuMatrix);\n\n    // remove N numbers from each column, N depends on the difficulty\n    const rows = new Array(9).fill(null).map((el, i) => i);\n    for(let c = 0; c < 9; c++) {\n      const toRemove = shuffle(rows);\n      for(let i = 0; i < difficulty; i++) sudokuMatrix[c][toRemove[i]] = 0;\n    }\n\n    for(let c = 0; c < 9; c++)\n      for(let r = 0; r < 9; r++)\n        if(sudokuMatrix[c][r]) cellTypes[c][r] = CellType.FIXED;\n        else cellTypes[c][r] = CellType.EDITABLE;\n\n    this.setState({ sudokuMatrix: sudokuMatrix, cellTypes: cellTypes });\n  }\n\n  // select the cell at the given coordinates\n  selectCell(coordinates) {\n    // console.log(\"selected (\" + coordinates.c + \", \" + coordinates.r + \")\");\n    if(coordinates.c < 0 || 8 < coordinates.c || coordinates.r < 0 || 8 < coordinates.r) {\n      // no need to re-render if no cell was selected\n      if(this.state.cellSelected) this.setState({ cellSelected: null });\n      return;\n    }\n\n    this.setState({ cellSelected: coordinates });\n  }\n\n  // set a new number at the given cell\n  setNumber(coordinates, nb) {\n    // console.log(coordinates.c, coordinates.r, nb);\n    const matrix = _.cloneDeep(this.state.sudokuMatrix);\n    let types = _.cloneDeep(this.state.cellTypes);\n\n    // reset cell in case a number is already present\n    matrix[coordinates.c][coordinates.r] = 0;\n    let valid = checkNumberCell(matrix, coordinates.c, coordinates.r, nb);\n    matrix[coordinates.c][coordinates.r] = nb;\n    if(valid) {\n      // console.log(\"valid?\")\n      valid = isMatrixValid(matrix);\n      // console.log(valid);\n    }\n    types[coordinates.c][coordinates.r] = valid ? CellType.VALID : CellType.INVALID;\n\n    // const i = invalids.indexOf(coordinates);\n    // if(valid && i !== -1) invalids = invalids.slice(i);\n    // else if(!valid && i !== -1) invalids.push(coordinates);\n    \n    // this.setState({ edit: gameMatrix, invalidCoordinates: invalids });\n    this.setState({ sudokuMatrix: matrix, cellTypes: types });\n  }\n\n  keyDown(e) {\n    const numbers = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n    const charCode = e.keyCode || e.which;\n    let character = String.fromCharCode(charCode);\n    if(this.state.cellSelected) {\n      // erase number in case of delete of backspace press\n      if(charCode === 46 || charCode === 8) character = '0';\n      // input new number in the cell\n      if (-1 < numbers.indexOf(character)) this.setNumber(this.state.cellSelected, +character);\n      this.setState({ cellSelected: null });\n    }\n  }\n\n  // create a matrix of 9 cells\n  makeMatrice() {\n    return new Array(9).fill(null).map((el, i) => {\n      return <Matrix3 key={\"matrix\"+(i+1)}\n                      matrixNb={i}\n                      matrix={this.state.sudokuMatrix}\n                      cellTypes={this.state.cellTypes}\n                      cellSelected={this.state.cellSelected}\n                      setNumber={this.setNumber}\n                      selectCell={this.selectCell}/>\n    });\n  }\n\n  componentDidMount() {\n    this.startGame(this.props.difficulty);\n  }\n\n  render() {\n    return (\n        <div className=\"sudoku\" tabIndex=\"0\"\n          onKeyDown={this.keyDown}\n          onBlur={() => this.selectCell({c: -1, r: -1})}>\n          {this.makeMatrice()}\n        </div>\n    )\n  }\n}\n\n\nfunction formatTime(time) {\n  const [ hour, minutes, seconds ] = [ Math.floor(time/3600), Math.floor(time/60), time%60 ];\n  const text = [ hour < 10 ? \"0\"+hour : \"\"+hour,\n                minutes < 10 ? \"0\"+minutes : \"\"+minutes,\n                seconds < 10 ? \"0\"+seconds : \"\"+seconds];\n  return text.join(\":\");\n}\n\n// simple timer to count time since start of the game\nconst Timer = (props) => {\n  const [ time, setTime ] = useState(0);\n\n  useEffect(() => {\n    setTimeout( () => setTime(time+1),1000);\n  });\n\n  return (\n      <div className=\"right-container\">\n        <span id=\"timer\">\n          {formatTime(time)}\n        </span>\n      </div>\n  );\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      difficulty: 0\n    }\n  }\n\n  playArea() {\n    return (\n        <div>\n          <Timer />\n          <Sudoku difficulty={this.state.difficulty}/>\n        </div>\n    )\n  }\n\n  render() {\n    return (\n        <div className=\"center-container\">\n          <div hidden={this.state.difficulty}>\n            <h2>Choose your difficulty</h2>\n            <div className=\"button-list\">\n              <button onClick={() => this.setState({difficulty: Difficulty.EASY})}>Easy</button>\n              <button onClick={() => this.setState({difficulty: Difficulty.MEDIUM})}>Medium</button>\n              <button onClick={() => this.setState({difficulty: Difficulty.HARD})}>Hard</button>\n            </div>\n          </div>\n          {this.state.difficulty ? this.playArea() : <div/>}\n        </div>\n    )\n  }\n}\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Bruno\\Documents\\Programming\\sudoku-react\\src\\reportWebVitals.js",[],"C:\\Users\\Bruno\\Documents\\Programming\\sudoku-react\\src\\index.js",[],{"ruleId":"16","severity":1,"message":"17","line":24,"column":10,"nodeType":"18","messageId":"19","endLine":24,"endColumn":24},"no-unused-vars","'hardcodedStart' is defined but never used.","Identifier","unusedVar"]